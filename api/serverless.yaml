service: fhir-api

custom:
  resourceTable: ${ssm:/database/fhir-db-${self:custom.stage}/endpoint}
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  oauthCallback: ${opt:oauthCallback, 'http://localhost'}
  oauthRedirect: ${opt:oauthRedirect, 'http://localhost'}
  config: ${file(serverless_config.json)}

provider:
  name: aws
  region: eu-west-2
  stage: dev
  runtime: nodejs12.x
  memorySize: 128
  environment:
    API_URL:
      !Join [
        '',
        [
          'https://', !Ref ApiGatewayRestApi, 
          '.execute-api.${self:custom.region}.amazonaws.com/${self:custom.stage}'
        ],
      ]
    S3_KMS_KEY:
      Ref: ${ssm:/kms/fhir-binary-${self:custom.stage}/arn}~true
    RESOURCE_TABLE: '${self:custom.resourceTable}'
    FHIR_BINARY_BUCKET:
      Ref: ${ssm:/bucket/fhir-binary-${self:custom.stage}/arn}~true
    DYNAMODB_KEY:
      Ref: ${ssm:/kms/fhir-db-${self:custom.stage}/arn}~true
    DYNAMODB_ARN:
      Ref: ${ssm:/database/fhir-db-${self:custom.stage}/endpoint}~true
    OAUTH2_DOMAIN_ENDPOINT:
      !Join ['', [
        'https://', !Ref UserPoolDomain, 
        '.auth.${self:custom.region}.amazoncognito.com/oauth2'
        ]
      ]
  usagePlan:
    throttle:
      burstLimit: 100 # maximum API request rate limit over a time ranging from one to a few seconds
      rateLimit: 50 # average requests per second over an extended period of time
  iamRoleStatements:
    - Action:
        - 'kms:Describe*'
        - 'kms:Get*'
        - 'kms:List*'
        - 'kms:Encrypt'
        - 'kms:Decrypt'
        - 'kms:ReEncrypt*'
        - 'kms:GenerateDataKey'
        - 'kms:GenerateDataKeyWithoutPlaintext'
      Effect: Allow
      Resource:
        - !Ref S3_KMS_KEY
        - !Ref DYNAMODB_KEY
    - Action:
        - 'dynamodb:Query'
        - 'dynamodb:Scan'
        - 'dynamodb:GetItem'
        - 'dynamodb:PutItem'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:BatchWriteItem'
      Effect: Allow
      Resource:
        - !Ref DYNAMODB_ARN
    - Action:
        - 's3:*'
      Effect: Allow
      Resource:
        - !Ref FHIR_BINARY_BUCKET
        - !Join ['', [!Ref FHIR_BINARY_BUCKET, '/*']]
    - Action:
        - 'xray:PutTraceSegments'
        - 'xray:PutTelemetryRecords'
      Effect: Allow
      Resource:
        - '*'
    # - Effect: "Allow"
    #   Action: 
    #     - "ssm:GetParameters"
    #   Resource: "*"
  logs:
    restApi:
      executionLogging: true
      fullExecutionData: true
  tracing:
    apiGateway: true

functions:
  fhirServer:
    timeout: 40
    description: 'FHIR API Server'
    events:
      - http:
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            scopes: # must have both scopes
              - 'openid'
              - 'profile'
              - 'aws.cognito.signin.user.admin'
          method: ANY
          path: /
          private: true
      - http:
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
            scopes: # must have both scopes
              - 'openid'
              - 'profile'
              - 'aws.cognito.signin.user.admin'
          method: ANY
          path: '{proxy+}'
          private: true
    handler: src/index.default
    provisionedConcurrency: 2

resources:
  - Resources:
      ApiGatewayAuthorizer:
        DependsOn:
          - ApiGatewayRestApi
        Type: AWS::ApiGateway::Authorizer
        Properties:
          AuthorizerResultTtlInSeconds: 300
          IdentitySource: method.request.header.Authorization
          RestApiId:
            Ref: ApiGatewayRestApi
          Type: COGNITO_USER_POOLS
          Name: Authorizer
          ProviderARNs:
            - !Join ['', [!Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/', !Ref UserPool]]
  - ${file(cloudformation/cognito.yaml)}
  - Outputs:
      UserPoolId:
        Description: User pool id for the provisioning users.
        Value: !Ref UserPool
      UserPoolAppClientId:
        Description: App client id for the provisioning users.
        Value: !Ref UserPoolClient

plugins:
  - serverless-plugin-typescript
  - serverless-offline