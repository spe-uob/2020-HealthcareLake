# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!
#curl -H "Accept: application/json" -H "x-api-key:pByfSAKqrm4LDCWErEnlV8jDWQSeMF2zaLn1P8LU" https://avsy2fgmp3.execute-api.eu-west-2.amazonaws.com/dev/
service: fhir-api
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name
#custom:
#  config: ${file(serverless_config.json)}

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "2"

provider:
  name: aws
  stage: dev
  runtime: nodejs12.x

  # you can overwrite defaults here
  #  stage: dev
  region: eu-west-2
  apiKeys:
    - name: 'developer-key-${stage}'
      description: Key for developer to access the FHIR Api
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
  environment:
    # OAUTH2_DOMAIN_ENDPOINT:
    #   !Join ['', ['https://', !Ref UserPoolDomain, '.auth.${self:custom.region}.amazoncognito.com/oauth2']]
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:
  fhirServer:
    handler: index.default
    #    The following are a few example events you can configure
    #    NOTE: Please make sure to change your handler code to work with those events
    #    Check the event documentation for details
    events:
      - http:
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: ApiGatewayAuthorizer
          #   scopes: # must have both scopes
          #     - "openid"
          #     - "profile"
          #     - "aws.cognito.signin.user.admin"
          method: ANY
          path: /
          private: true
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
# resources:
#   - Resources:
#       ApiGatewayAuthorizer:
#         DependsOn:
#           - ApiGatewayRestApi
#         Type: AWS::ApiGateway::Authorizer
#         Properties:
#           AuthorizerResultTtlInSeconds: 300
#           IdentitySource: method.request.header.Authorization
#           RestApiId:
#             Ref: ApiGatewayRestApi
#           Type: COGNITO_USER_POOLS
#           Name: Authorizer
#           ProviderARNs:
#             - !Join ['', [!Sub 'arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/', !Ref UserPool]]
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#   - Outputs:
#       UserPoolId:
#         Description: User pool id for the provisioning users.
#         Value: !Ref UserPool
#       UserPoolAppClientId:
#         Description: App client id for the provisioning users.
#         Value: !Ref UserPoolClient 
# #     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
#plugins:
 # - serverless-plugin-typescript
  #- serverless-offline