import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job

# @params: [JOB_NAME]
args = getResolvedOptions(sys.argv, ['JOB_NAME'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)
# @type: DataSource
# @args: [database = "fhir-catalog", table_name = "resource_db_dev", transformation_ctx = "datasource0"]
# @return: datasource0
# @inputs: []
datasource0 = glueContext.create_dynamic_frame.from_catalog(
    database="fhir-catalog", table_name="resource_db_dev", transformation_ctx="datasource0")
# @type: ApplyMapping
# @args: [mapping = [("code", "struct", "code", "struct"), ("subject", "struct", "subject", "struct"), ("encounter", "struct", "encounter", "struct"), ("lockendts", "long", "lockendts", "long"), ("vid", "long", "vid", "long"), ("effectivedatetime", "string", "effectivedatetime", "string"), ("meta", "struct", "meta", "struct"), ("documentstatus", "string", "documentstatus", "string"), ("id", "string", "id", "string"), ("issued", "string", "issued", "string"), ("category", "array", "category", "array"), ("status", "string", "status", "string"), ("resourcetype", "string", "resourcetype", "string"), ("valuequantity", "struct", "valuequantity", "struct"), ("insurance", "array", "insurance", "array"), ("item", "array", "item", "array"), ("use", "string", "use", "string"), ("created", "string", "created", "string"), ("priority", "struct", "priority", "struct"), ("type", "struct", "type", "struct"), ("total", "struct", "total", "struct"), ("provider", "struct", "provider", "struct"), ("patient", "struct", "patient", "struct"), ("billableperiod", "struct", "billableperiod", "struct"), ("facility", "struct", "facility", "struct"), ("performer", "array", "performer", "array"), ("presentedform", "array", "presentedform", "array"), ("prescription", "struct", "prescription", "struct"), ("identifier", "array", "identifier", "array"), ("period", "struct", "period", "struct"), ("participant", "array", "participant", "array"), ("serviceprovider", "struct", "serviceprovider", "struct"), ("location", "struct", "location", "struct"), ("class", "struct", "class", "struct"), ("supportinginfo", "array", "supportinginfo", "array"), ("primarysource", "boolean", "primarysource", "boolean"), ("occurrencedatetime", "string", "occurrencedatetime", "string"), ("vaccinecode", "struct", "vaccinecode", "struct"), ("procedure", "array", "procedure", "array"), ("insurer", "struct", "insurer", "struct"), ("claim", "struct", "claim", "struct"), ("payment", "struct", "payment", "struct"), ("careteam", "array", "careteam", "array"), ("outcome", "string", "outcome", "string"), ("contained", "array", "contained", "array"), ("referral", "struct", "referral", "struct"), ("date", "string", "date", "string"), ("custodian", "struct", "custodian", "struct"), ("author", "array", "author", "array"), ("content", "array", "content", "array"), ("context", "struct", "context", "struct"), ("performedperiod", "struct", "performedperiod", "struct"), ("valuecodeableconcept", "struct", "valuecodeableconcept", "struct"), ("diagnosis", "array", "diagnosis", "array"), ("verificationstatus", "struct", "verificationstatus", "struct"), ("abatementdatetime", "string", "abatementdatetime", "string"), ("recordeddate", "string", "recordeddate", "string"), ("clinicalstatus", "struct", "clinicalstatus", "struct"), ("onsetdatetime", "string", "onsetdatetime", "string"), ("requester", "struct", "requester", "struct"), ("authoredon", "string", "authoredon", "string"), ("medicationcodeableconcept", "struct", "medicationcodeableconcept", "struct"), ("intent", "string", "intent", "string"), ("dosageinstruction", "array", "dosageinstruction", "array"), ("reasoncode", "array", "reasoncode", "array"), ("result", "array", "result", "array"), ("activity", "array", "activity", "array"), ("text", "struct", "text", "struct"), ("extension", "array", "extension", "array"), ("address", "array", "address", "array"), ("gender", "string", "gender", "string"), ("birthdate", "date", "birthdate", "date"), ("_birthdate", "struct", "_birthdate", "struct"), ("name", "string", "name", "string"), ("telecom", "array", "telecom", "array"), ("multiplebirthboolean", "boolean", "multiplebirthboolean", "boolean"), ("communication", "array", "communication", "array"), ("maritalstatus", "struct", "maritalstatus", "struct"), ("managingorganization", "struct", "managingorganization", "struct"), ("reasonreference", "array", "reasonreference", "array"), ("agent", "array", "agent", "array"), ("recorded", "string", "recorded", "string"), ("target", "array", "target", "array"), ("active", "boolean", "active", "boolean"), ("contenttype", "string", "contenttype", "string"), ("component", "array", "component", "array"), ("serialnumber", "string", "serialnumber", "string"), ("lotnumber", "string", "lotnumber", "string"), ("distinctidentifier", "string", "distinctidentifier", "string"), ("devicename", "array", "devicename", "array"), ("udicarrier", "array", "udicarrier", "array"), ("manufacturedate", "string", "manufacturedate", "string"), ("expirationdate", "string", "expirationdate", "string"), ("addresses", "array", "addresses", "array"), ("deceasedboolean", "boolean", "deceasedboolean", "boolean"), ("contact", "array", "contact", "array"), ("deceaseddatetime", "string", "deceaseddatetime", "string")], transformation_ctx = "applymapping1"]
# @return: applymapping1
# @inputs: [frame = datasource0]
applymapping1 = ApplyMapping.apply(frame=datasource0, mappings=[("code", "struct", "code", "struct"), ("subject", "struct", "subject", "struct"), ("encounter", "struct", "encounter", "struct"), ("lockendts", "long", "lockendts", "long"), ("vid", "long", "vid", "long"), ("effectivedatetime", "string", "effectivedatetime", "string"), ("meta", "struct", "meta", "struct"), ("documentstatus", "string", "documentstatus", "string"), ("id", "string", "id", "string"), ("issued", "string", "issued", "string"), ("category", "array", "category", "array"), ("status", "string", "status", "string"), ("resourcetype", "string", "resourcetype", "string"), ("valuequantity", "struct", "valuequantity", "struct"), ("insurance", "array", "insurance", "array"), ("item", "array", "item", "array"), ("use", "string", "use", "string"), ("created", "string", "created", "string"), ("priority", "struct", "priority", "struct"), ("type", "struct", "type", "struct"), ("total", "struct", "total", "struct"), ("provider", "struct", "provider", "struct"), ("patient", "struct", "patient", "struct"), ("billableperiod", "struct", "billableperiod", "struct"), ("facility", "struct", "facility", "struct"), ("performer", "array", "performer", "array"), ("presentedform", "array", "presentedform", "array"), ("prescription", "struct", "prescription", "struct"), ("identifier", "array", "identifier", "array"), ("period", "struct", "period", "struct"), ("participant", "array", "participant", "array"), ("serviceprovider", "struct", "serviceprovider", "struct"), ("location", "struct", "location", "struct"), ("class", "struct", "class", "struct"), ("supportinginfo", "array", "supportinginfo", "array"), ("primarysource", "boolean", "primarysource", "boolean"), ("occurrencedatetime", "string", "occurrencedatetime", "string"), ("vaccinecode", "struct", "vaccinecode", "struct"), ("procedure", "array", "procedure", "array"), ("insurer", "struct", "insurer", "struct"), ("claim", "struct", "claim", "struct"), ("payment", "struct", "payment", "struct"), ("careteam", "array", "careteam", "array"), ("outcome", "string", "outcome", "string"), ("contained", "array", "contained", "array"), ("referral", "struct", "referral", "struct"), ("date", "string", "date", "string"), ("custodian", "struct", "custodian", "struct"), ("author", "array", "author", "array"), ("content", "array", "content", "array"), ("context", "struct", "context", "struct"), (
    "performedperiod", "struct", "performedperiod", "struct"), ("valuecodeableconcept", "struct", "valuecodeableconcept", "struct"), ("diagnosis", "array", "diagnosis", "array"), ("verificationstatus", "struct", "verificationstatus", "struct"), ("abatementdatetime", "string", "abatementdatetime", "string"), ("recordeddate", "string", "recordeddate", "string"), ("clinicalstatus", "struct", "clinicalstatus", "struct"), ("onsetdatetime", "string", "onsetdatetime", "string"), ("requester", "struct", "requester", "struct"), ("authoredon", "string", "authoredon", "string"), ("medicationcodeableconcept", "struct", "medicationcodeableconcept", "struct"), ("intent", "string", "intent", "string"), ("dosageinstruction", "array", "dosageinstruction", "array"), ("reasoncode", "array", "reasoncode", "array"), ("result", "array", "result", "array"), ("activity", "array", "activity", "array"), ("text", "struct", "text", "struct"), ("extension", "array", "extension", "array"), ("address", "array", "address", "array"), ("gender", "string", "gender", "string"), ("birthdate", "date", "birthdate", "date"), ("_birthdate", "struct", "_birthdate", "struct"), ("name", "string", "name", "string"), ("telecom", "array", "telecom", "array"), ("multiplebirthboolean", "boolean", "multiplebirthboolean", "boolean"), ("communication", "array", "communication", "array"), ("maritalstatus", "struct", "maritalstatus", "struct"), ("managingorganization", "struct", "managingorganization", "struct"), ("reasonreference", "array", "reasonreference", "array"), ("agent", "array", "agent", "array"), ("recorded", "string", "recorded", "string"), ("target", "array", "target", "array"), ("active", "boolean", "active", "boolean"), ("contenttype", "string", "contenttype", "string"), ("component", "array", "component", "array"), ("serialnumber", "string", "serialnumber", "string"), ("lotnumber", "string", "lotnumber", "string"), ("distinctidentifier", "string", "distinctidentifier", "string"), ("devicename", "array", "devicename", "array"), ("udicarrier", "array", "udicarrier", "array"), ("manufacturedate", "string", "manufacturedate", "string"), ("expirationdate", "string", "expirationdate", "string"), ("addresses", "array", "addresses", "array"), ("deceasedboolean", "boolean", "deceasedboolean", "boolean"), ("contact", "array", "contact", "array"), ("deceaseddatetime", "string", "deceaseddatetime", "string")], transformation_ctx="applymapping1")
# @type: ResolveChoice
# @args: [choice = "make_struct", transformation_ctx = "resolvechoice2"]
# @return: resolvechoice2
# @inputs: [frame = applymapping1]
resolvechoice2 = ResolveChoice.apply(
    frame=applymapping1, choice="make_struct", transformation_ctx="resolvechoice2")
# @type: DropNullFields
# @args: [transformation_ctx = "dropnullfields3"]
# @return: dropnullfields3
# @inputs: [frame = resolvechoice2]
dropnullfields3 = DropNullFields.apply(
    frame=resolvechoice2, transformation_ctx="dropnullfields3")
# @type: DataSink
# @args: [connection_type = "s3", connection_options = {"path": "s3://healthcarelake-dev-lake"}, format = "parquet", transformation_ctx = "datasink4"]
# @return: datasink4
# @inputs: [frame = dropnullfields3]
datasink4 = glueContext.write_dynamic_frame.from_options(frame=dropnullfields3, connection_type="s3", connection_options={
                                                         "path": "s3://healthcarelake-dev-lake"}, format="parquet", transformation_ctx="datasink4")
job.commit()
